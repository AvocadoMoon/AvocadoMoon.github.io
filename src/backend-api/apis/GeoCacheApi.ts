/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GeoCacheSubmission,
} from '../models/index';
import {
    GeoCacheSubmissionFromJSON,
    GeoCacheSubmissionToJSON,
} from '../models/index';

export interface GetSubmissionRequest {
    pageNumber: number;
}

export interface SendSubmissionRequest {
    geoCacheSubmission: GeoCacheSubmission;
}

/**
 * 
 */
export class GeoCacheApi extends runtime.BaseAPI {

    /**
     * Retrieve geo cache submission.
     */
    async getSubmissionRaw(requestParameters: GetSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GeoCacheSubmission>>> {
        if (requestParameters.pageNumber === null || requestParameters.pageNumber === undefined) {
            throw new runtime.RequiredError('pageNumber','Required parameter requestParameters.pageNumber was null or undefined when calling getSubmission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/geoCache/{pageNumber}`.replace(`{${"pageNumber"}}`, encodeURIComponent(String(requestParameters.pageNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GeoCacheSubmissionFromJSON));
    }

    /**
     * Retrieve geo cache submission.
     */
    async getSubmission(requestParameters: GetSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GeoCacheSubmission>> {
        const response = await this.getSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a geo cache submission to the endpoint.
     */
    async sendSubmissionRaw(requestParameters: SendSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.geoCacheSubmission === null || requestParameters.geoCacheSubmission === undefined) {
            throw new runtime.RequiredError('geoCacheSubmission','Required parameter requestParameters.geoCacheSubmission was null or undefined when calling sendSubmission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/geoCache`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GeoCacheSubmissionToJSON(requestParameters.geoCacheSubmission),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send a geo cache submission to the endpoint.
     */
    async sendSubmission(requestParameters: SendSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendSubmissionRaw(requestParameters, initOverrides);
    }

}
